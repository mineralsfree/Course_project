unit Unit2;
interface
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, math,
  Vcl.Menus,Vcl.Buttons, Lists, System.ImageList, Vcl.ImgList, Vcl.ComCtrls,
  Vcl.ToolWin,Types_const, DrawItems, Vcl.Imaging.pngimage;
type
  TKek = class(TForm)
    mm1: TMainMenu;
    File1: TMenuItem;
    New1: TMenuItem;
    Open1: TMenuItem;
    Save1: TMenuItem;
    Export1: TMenuItem;
    Undo1: TMenuItem;
    ScrollBox1: TScrollBox;
    pb1: TPaintBox;
    tlb1: TToolBar;
    il1: TImageList;
    btn1: TToolButton;
    btn2: TToolButton;
    btnWhile: TToolButton;
    lbl1: TLabel;
    mmoInput: TMemo;
    ToolButton1: TToolButton;
    mniExportBmp: TMenuItem;
    dlgOpen1: TOpenDialog;
    mniExportPNG: TMenuItem;
    procedure getCharParams(var Chrwidth, Chrheight:Integer);
    procedure FormCreate(Sender: TObject);
    procedure ScrollBox1MouseWheelDown(Sender: TObject; Shift: TShiftState;
      MousePos: TPoint; var Handled: Boolean);
    procedure ScrollBox1MouseWheelUp(Sender: TObject; Shift: TShiftState;
      MousePos: TPoint; var Handled: Boolean);
    procedure pb1Paint(Sender: TObject);
    procedure btntaskClick(Sender: TObject);
    procedure btnIfClick(Sender: TObject);
    procedure pb1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnWhileClick(Sender: TObject);
    procedure ToolButton1Click(Sender: TObject);
    procedure inptext(pb1:TPaintBox; pinf:TFigureInfo);
    procedure mniExportBmpClick(Sender: TObject);
    procedure mniExportPNGClick(Sender: TObject);
  private
  public
  end;
var
increment:Integer;
k:Integer;
  IfState: TIfstates;
  MaxInlineChars:integer = 30;
  Maxlines:integer = 5;
  FieldLeft:Integer = 0;
  FieldTop:Integer = 0;
  FieldWidth:Integer = 750;
  FieldHeight:Integer = 1500;
  ButtonWidth:Integer;
  RectMinWidth:Integer = 150;
  RectMinHeight:Integer = 100;
  offset:Integer = 75;
  startX:Integer = 50;
  startY:Integer = 20;
  Radius:Integer = 30;
  arrowk:Integer = 12;
  arrAngel: real = Pi/6;
  IsRight,Selected,isUp:Boolean;
  Kek: TKek;
  Rect: TRect;
  FigureHead:PFigList;
  maxX, maxY:Integer;
ClickFigure: TFigureInfo;
lol:PFigList;
implementation
procedure clrscreen(pb1:TPaintBox);
begin
  pb1.Canvas.Brush.Color:=clWhite;
  pb1.Canvas.Rectangle(0,0,pb1.width,pb1.Height);
end;
procedure TKek.FormCreate(Sender: TObject);
var INIT:TFigureInfo;
begin
pb1.canvas.Pen.Width:=3;
createFigureHead(FigureHead);
ClickFigure:=FigureHead.Info;
clrscreen(pb1);
Selected:=False;
IfState:=RUP;
end;
procedure TKek.getCharParams(var Chrwidth, Chrheight:Integer);
var DC: HDC;
SaveFont: HFONT;
TTM: TTextMetric;
begin
DC := GetDC(mmoInput.Handle);
if (DC <> 0) then
  begin
  SaveFont := SelectObject(DC,mmoInput.Font.Handle);
  if (GetTextMetrics(DC,TTM)) then
    begin
    ChrWidth:=TTM.tmAveCharWidth+TTM.tmExternalLeading;
    Chrheight:=TTM.tmHeight;
    end;
  SelectObject(DC,SaveFont);
  ReleaseDC(mmoinput.handle,DC);
  end;
end;
procedure TKek.inptext(pb1:TPaintBox; pinf:TFigureInfo);
var p:PFigList;
  var lvlwidth:integer;
ChrWidth:integer;
var i,maxStrLength:Integer;
Chrheight,CurrStrWidth:Integer;
begin
getCharParams(ChrWidth,Chrheight);
p:=GetAdr(figurehead,pinf);
   mmoInput.Left:=pb1.left;
   mmoInput.Top:=pb1.Top;
   mmoInput.Width:=MaxInlineChars* ChrWidth;
   mmoInput.Height:=RectMinWidth;
   mmoInput.Visible:=True;
   mmoInput.Lines.Clear;
   mmoInput.SelStart:=0;
   mmoInput.Lines.Add(p.Info.Txt);
   mmoInput.MaxLength:=30;
end;
procedure TKek.mniExportBmpClick(Sender: TObject);
var
  kek, lol: integer;
begin
  if dlgOpen1.Execute then
  begin
    ClickFigure := GetClickFig(0,0,FigureHead,Selected);
    with TBitmap.Create do
    begin
      Width := pb1.Width;
      Height := pb1.Height;
      defaultDraw(FigureHead, canvas);
      DrawBlocks(Canvas,FigureHead,kek,lol, IfState);
      SaveToFile(dlgOpen1.FileName);
      free;
    end;
  end;
end;
procedure TKek.mniExportPNGClick(Sender: TObject);
var
  Bitmap: TBitmap;
  png: TPNGImage;
  kek,lol:Integer;
  Rect: TRect;
begin
  if dlgOpen1.Execute then
  begin
    try
      ClickFigure := GetClickFig(0,0,FigureHead,Selected);
      Bitmap := TBitmap.Create;
      png := TPngImage.Create;
      with bitmap do
      begin
        png := TPngImage.Create;
        Width := pb1.Width;
        Height := pb1.Height;
        defaultDraw(FigureHead, canvas);
        DrawBlocks(Canvas,FigureHead,kek,lol, IfState);
      end;
      png.Assign(bitmap);
      rect.Left := 0;
      rect.Top :=0;
      rect.Right := Bitmap.Width;
      Rect.Bottom := Bitmap.Height;
      png.Draw(Bitmap.Canvas, rect);
      png.SaveToFile(dlgOpen1.FileName);
    finally
      bitmap.Free;
      png.Free;
    end;
  end;
end;
procedure TKek.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var ClickAdr:PFigList;
begin
 if Selected then
begin
  ClickAdr:=GetAdr(FigureHead,ClickFigure);
  if Key = VK_DELETE  then
  try
    DeleteBlock(Figurehead, Clickfigure);
  finally
  end;
  end;     }
 if key = 38 then  
  begin
   if Selected then
     begin
       if ClickFigure.FigType  = IfFig then
       begin
        if ord(ifstate)>0 then
        IfState:=pred(Ifstate)
        else
        begin
        IfState:=Succ(ifstate);
        IfState:=Succ(ifstate);
        end;
        pb1.Repaint;
        exit
       end;
     end;
   try
    ClickAdr:=GetParentAdr(figurehead, ClickAdr);
    ClickFigure:=Clickadr.Info;
   except
   end;
  end;
end;
if selected and (key = 13) then
begin
Inptext(pb1,ClickFigure);
end;
if key = VK_DOWN  then  
begin
  IsRight:=False;
     if Selected then
     begin
       if ClickFigure.FigType  = IfFig then
       begin
       if ord(ifstate)<2 then
        IfState:=succ(Ifstate)
        else
        begin
        IfState:=pred(Ifstate);
        IfState:=pred(Ifstate);
        end;
        pb1.Repaint;
        Exit;
       end;
     end;
end;
if Key = 39 then  
  IsRight:= True;
  pb1.Repaint;
end;
procedure TKek.pb1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var x0,y0:Integer;
var lol:PFigList;
 var sel,ifst,maxStr:string;
 var prex:TFigureInfo;
begin
if Selected  then
  begin
  prex:=GetClickFig(x,y,FigureHead,Selected);
   if (ClickFigure.x = prex.x) and (ClickFigure.y = prex.y)  then
   begin
    Exit;
   end;
  end;
    // ShowMessage(IntToStr((mmoInput.Lines.Count+1)*Chrheight));  }
 end;}
   if  (mmoInput.Visible) then
 begin
   GetAdr(FigureHead,ClickFigure).Info.Txt:=mmoInput.Text;
   mmoInput.Visible:=False;
 end;
  case IfState of
      RUP: ifst:='RUP';
      RDOWN: ifst:='Rdown';
      Down: ifst:='down';
  end;
ClickFigure:=GetClickFig(x,y,FigureHead,Selected);
if selected then
sel:= 'selected' else sel:='Not selected';
  lbl1.Caption:=
     'width: '+ IntToStr(ClickFigure.width) +#10#13
    +'height: '+ IntToStr(ClickFigure.height) +#10#13
    +'x: '+ IntToStr(ClickFigure.x) +#10#13
    +'y: '+ IntToStr(ClickFigure.y) +#10#13
    +'level: '+ IntToStr(ClickFigure.level) +#10#13
    +'pb1width: '+ IntToStr(Kek.pb1.width) +#10#13
    +'Selected: '+ sel +#10#13
    +'Ifstate: '+ ifst +#10#13
    +'row: '+ IntToStr(ClickFigure.Row) +#10#13
    +'maxX: ' + IntToStr(maxX) + #10#13
    +'Memo1.CaretPos.y: ' + IntToStr(mmoInput.CaretPos.y) + #10#13  ;
  pb1.Repaint;
  end;
procedure ButtonReaction(Figure: TFigType);
var p:TFigureInfo;
var prex:PFigList;
tempP:TFigureInfo;
var dRow:integer;
begin
  if Selected  then
  begin
  prex:=GetAdr(FigureHead,ClickFigure);
  p.height:=rectMinHeight;
  p.FigType:=Figure;
  p.Txt:='';
  if (ClickFigure.FigType = IfFig) and ((IfState = RUP) or (IfState = RDOWN)) then
    begin
    case IfState of
    RUP:
      begin
      p.x:=prex.Info.x +prex.Info.width+ offset;   
      p.y:=prex.Info.y;
      p.Row:=prex.Info.row;
      p.width:=RectMinWidth;
      p.level:=prex.Info.level+1;
      CreateNode(FigureHead,p,prex.Info);
      end;
      RDOWN:
      begin
      p.x:=ClickFigure.x +ClickFigure.width+ offset;
      p.y:=ClickFigure.y+ClickFigure.Height + offset;
      p.Row:=ClickFigure.row+1;
      p.width:=RectMinWidth;
      p.level:=ClickFigure.level+1;
       if p.level>1 then
      SetAdjustment(FigureHead,p.level,p.Row);
      CreateLeft(FigureHead,p,ClickFigure);
      end;
    end;
    Kek.pb1.repaint;
    end
    else
    if (ClickFigure.FigType = WhileFig) and IsRight then
    begin
      p.x:=ClickFigure.x +ClickFigure.width+ offset;
      p.y:=ClickFigure.y+ClickFigure.Height + offset;
      p.Row:=ClickFigure.row+1;
      p.width:=RectMinWidth;
      p.level:=ClickFigure.level+1;
      if p.level>1 then
      SetAdjustment(FigureHead,p.level,p.Row);
      CreateLeft(FigureHead,p,ClickFigure);
    end else
        if (ClickFigure.FigType = RepeatFig) and IsRight then
    begin
    p.x:=prex.Info.x +prex.Info.width+ offset;   
    p.y:=prex.Info.y;
    p.Row:=prex.Info.row;
    p.width:=RectMinWidth;
    p.level:=prex.Info.level+1;
    CreateNode(FigureHead,p,prex.Info);
    end
    else
   if IsRight and (prex.R = nil) then
    begin
    p.x:=ClickFigure.x+ClickFigure.width+offset;
    p.y:=ClickFigure.y+half(ClickFigure.Height)-half(RectMinHeight);
    p.Row:=ClickFigure.row;
    p.width:=RectMinWidth;
    p.level:=ClickFigure.level+1;
    CreateNode(FigureHead,p,ClickFigure);
    end
    else  if (prex.adr = nil) then
    begin
      p.x:=ClickFigure.x;
      p.width:=ClickFigure.width;
      p.level:=ClickFigure.level;
      p.y:=GetAdjust(FigureHead,p.level,ClickFigure,dRow);
      p.Row:= GetRow(FigureHead,p.level,p);
       if p.level>1 then
      SetAdjustment(FigureHead,p.level,p.Row);
      insertFigure(FigureHead,p,ClickFigure);
    end;
  Kek.pb1.Repaint;
  end;
end;
procedure TKek.pb1Paint(Sender: TObject);
var temp:PFigList;
begin
  clrscreen(pb1);
  if maxY>(Kek.pb1.Height- 400) then
begin
Kek.ScrollBox1.Height:=Kek.ScrollBox1.Height+200;
Kek.pb1.Height:=Kek.pb1.Height+200;
end;
if maxX>(Kek.pb1.Width-600) then
begin
Kek.ScrollBox1.width:=Kek.ScrollBox1.width+500;
Kek.pb1.width:=Kek.pb1.width+500;
end;
  DrawBlocks(pb1.Canvas,FigureHead,maxX,maxY,IfState);
if Selected then
  begin
  DrawDirectArrows(pb1.Canvas,ClickFigure,IsRight,ifState );
  drawRect(pb1.Canvas,ClickFigure,clBlue);
  end;
  defaultDraw(FigureHead,pb1.Canvas);
end;
procedure TKek.btntaskClick(Sender: TObject);
begin
ButtonReaction(TaskFig);
end;
procedure TKek.btnWhileClick(Sender: TObject);
begin
ButtonReaction(WhileFig);
end;
procedure TKek.btnIfClick(Sender: TObject);
begin
ButtonReaction(IfFig);
end;
procedure TKek.ScrollBox1MouseWheelDown(Sender: TObject; Shift: TShiftState;
  MousePos: TPoint; var Handled: Boolean);
begin
if ssShift
 in Shift then
 begin
 scrollbox1.HorzScrollBar.Position:=scrollbox1.HorzScrollBar.position + scrollbox1.VertScrollBar.Increment;
 end
 else
begin
scrollbox1.VertScrollBar.Position:=scrollbox1.VertScrollBar.position + scrollbox1.VertScrollBar.Increment;
end;
end;
procedure TKek.ScrollBox1MouseWheelUp(Sender: TObject; Shift: TShiftState;
  MousePos: TPoint; var Handled: Boolean);
begin
if ssShift in Shift then
 begin
 scrollbox1.HorzScrollBar.Position:=scrollbox1.HorzScrollBar.position - scrollbox1.VertScrollBar.Increment;
 end
 else
begin
scrollbox1.VertScrollBar.Position:=scrollbox1.VertScrollBar.position - scrollbox1.VertScrollBar.Increment;
end;
end;
procedure TKek.ToolButton1Click(Sender: TObject);
begin
ButtonReaction(RepeatFig);
end;
end.
